
##  [@let x (+ (+ 1 2) 3) (* x x)]
##  (* (+ (+ 1 2) 3) 
##  	(+ (+ 1 2) 3))

##  ([@func f x [@if x (* x (f (- x 1))) 1]] 5)

##  [@if (+ 1 1) (print "hey") (print "hello")]
##  [@if (+ 1 1) 17 (+ 2 (+ 3 4))]

##  ([@if (+ 1 1) [@lamb x (+ x x)] +] 3 4)
##  (+ (+ 3 4) 5)
##  [@lamb x y (+ (* x x) (* y y))]
##  ([@lamb x y (+ (* x x) (* y y))] 3 4)
##  (([@lamb x [@lamb y (+ (* x x) (* y y))]] 3) 4)
##  (+ (* x x) (* y y))

##  ([@lamb f (f (f 3))] [@lamb x (* x x)])
##  [@lrun 100 ([@lamb f (f (f 3))] sqr)]

##  ([@try [@lrun 0 [@lamb x y (+ (* x x) (* y y))]] +] 3 4)


## the cost of this is a function of the cost of f
##  [@lamb f (f (f 3))] 
##  [@let f [@lamb x (* x x)] (f (f 3))]

##  [@try [@if @false 42 [@raise]] 123]
##  [@lrun 100 (+ 3 4)]






